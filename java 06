package games.HouseRentalSystem.view;
import games.HouseRentalSystem.domain.House;
import games.HouseRentalSystem.service.HouseService;
import games.HouseRentalSystem.tools.Utility;
import java.util.Scanner;
// 用户看到的菜单界面
public class View {
    Scanner scanner = new Scanner(System.in);
    private int key;
    private boolean loop = true;
    private  HouseService houseService = new HouseService(10);

    // 主菜单
    public void mainMenu(){
        do{
            System.out.println("----------------房屋出租系统----------------");
            System.out.println("\t\t\t1 新增房源");
            System.out.println("\t\t\t2 查找房屋");
            System.out.println("\t\t\t3 删除房屋");
            System.out.println("\t\t\t4 修改房屋信息");
            System.out.println("\t\t\t5 房屋列表");
            System.out.println("\t\t\t6 退   出");
            System.out.println("请输入你的选择:(1-6)");

            key = Utility.readInt();
            switch (key){
                case 1:
                    this.addHouse();
                    break;
                case 2:
                    this.seekHouse();
                    break;
                case 3:
                    this.deleteHouse();
                    break;
                case 4:
                    this.changeHouse();
                    break;
                case 5:
                    this.listHouses();
                    break;
                case 6:
                    this.exit();
                    break;
                default:
                    System.out.println("你的选择错误，请重新选择");
                    break;
            }
        }while(loop);

    }
    // 新增房源
    public void addHouse(){
        System.out.println("-----------------添加房屋-----------------");
        System.out.println("姓名：");
        String name = Utility.readString(8);
        System.out.println("电话：");
        String phone = Utility.readString(12);
        System.out.println("地址：");
        String address = Utility.readString(20);
        System.out.println("月租：");
        int rent = Utility.readInt();
        System.out.println("状态(未出租/已出租)：");
        String state = Utility.readString(3);
        House house = new House(0,name,phone,address,rent,state);
        if(houseService.add(house)){
            System.out.println("-----------------添加完成-----------------");
        }else{
            return;
        }
    }
    // 查找房屋
    public void seekHouse(){
        System.out.println("-----------------查找房屋-----------------");
        System.out.print("请输入查找房源的编号：");
        int id = Utility.readInt();
        System.out.println(houseService.seek(id));
    }
    // 删除房屋
    public void deleteHouse() {
        String choice;
        System.out.println("-----------------删除房屋-----------------");
        System.out.println("请输入删除房屋编号(-1退出)：");
        int id = Utility.readInt();
        if (id == -1) {
            return;
        }
        System.out.println("确认是否删除(Y/N)： 请小心选择：");
            do {
                choice = Utility.readString(1);
            }while (!(choice.equals("Y") || choice.equals("N") || choice.equals("y") || choice.equals("n")));
            if (choice.equals("Y") || choice.equals("y")) {
                if (houseService.delete(id)) {
                    System.out.println("-----------------删除完成-----------------");
                    return;
                }
                System.out.println("未找到编号为" + id + "的房源");
            }
        }
    // 修改房屋信息
    public void changeHouse(){
        System.out.println("-----------------修改房屋-----------------");
        System.out.println("请选择待修改房屋编号(-1退出)");
        int id = Utility.readInt();
        if(id == -1){
            return;
        }
        if(houseService.change(id)){
            System.out.println("-----------------修改成功-----------------");;
        }else System.out.println("Not Found!");
    }
    // 房屋列表
    public void listHouses(){
        System.out.println("-----------------房屋列表-----------------");
        System.out.println("编号\t\t房主\t\t电话\t\t地址\t\t月租\t\t状态(未出租/已出租)");
        House[] houses = houseService.list();
        for (int i = 0; i < houses.length; i++) {
            if(houses[i] == null){
                break;
            }
            System.out.println(houses[i]);
        }
        System.out.println("---------------房屋列表完成----------------");
    }
    // 退   出
    public void exit(){
        System.out.println("是否确认退出？(Y/N)");
        String choice = Utility.readString(1);
        while(!(choice.equals("Y") || choice.equals("N") || choice.equals("y") || choice.equals("n"))){
            System.out.println("选择错误，请重新输入：");
            choice = Utility.readString(1);
        }
        if(choice.equals("Y") || choice.equals("y")){
            loop = false;
        }
        else loop = true;
    }
}



// 系统提供服务的类
package games.HouseRentalSystem.service;
import games.HouseRentalSystem.domain.House;
import games.HouseRentalSystem.tools.Utility;
import games.exercise.exercise08.Person;

public class HouseService {
    private House[] houses;// 保存House对象
    private int houseNum = 1;// 记录当前有多少个房屋信息
    private int idCounter = 1;// 记录当前的id增长到哪里

    public HouseService(int size) {
        houses = new House[size];
        // 初始化一个对象
        houses[0] = new House(1,"jack","112","顺庆区",1200,"未出租");
    }
    // 房屋列表
    public House[] list(){
        return houses;
    }
    // 新增房源
    public boolean add(House house){
        if(houseNum >= houses.length){
            System.out.println("数组长度不够，不能再添加");
            return false;
        }
        // 设计一个id自增长的机制，然后更新house的id
        house.setId(++idCounter);
        // 将house的信息添加到houses数组里去
        houses[houseNum++] = house;
        return true;
    }
    // 删除房屋
    public boolean delete(int id){
        for (int i = 0; i < houseNum; i++) {
            if(houses[i].getId() == id){
                for (int j = i; j < houseNum-1; j++) {
                    houses[j] = houses[j + 1];
                }
                houses[--houseNum] = null;
                return true;
            }
        }
        return false;
    }
    // 查找房屋
    public String seek(int id) {
        for (int i = 0; i < houseNum; i++) {
            if (houses[i].getId() == id) {
                return houses[i].toString();
            }
        }
        return "Not Found!";
    }
    // 修改房屋信息
    public boolean change(int id){
        for (int i = 0; i < houseNum; i++) {
            if (houses[i].getId() == id) {
                System.out.print("姓名("+houses[i].getName()+"):");
                String name = Utility.readString(8,"");
                if (!name.equals("")){
                    houses[i].setName(name);
                }
                System.out.print("电话("+houses[i].getPhone()+"):");
                String phone = Utility.readString(12,"");
                if (!phone.equals("")){
                    houses[i].setPhone(phone);
                }
                System.out.print("地址("+houses[i].getAddress()+"):");
                String address = Utility.readString(20,"");
                if (!address.equals("")){
                    houses[i].setAddress(address);
                }
                System.out.print("月租("+houses[i].getRent()+"):");
                int rent = Utility.readInt(-1);
                if (rent != -1){
                    houses[i].setRent(rent);
                }
                System.out.print("状态(未出租/已出租)("+houses[i].getState()+"):");
                String state = Utility.readString(3,"");
                if (!state.equals("")){
                    houses[i].setState(state);
                }
                return true;
            }
        }
        return false;
    }

    public House[] getHouses() {
        return houses;
    }
    public void setHouses(House[] houses) {
        this.houses = houses;
    }
    public int getHouseNum() {
        return houseNum;
    }

    public void setHouseNum(int houseNum) {
        this.houseNum = houseNum;
    }

    public int getIdCounter() {
        return idCounter;
    }

    public void setIdCounter(int idCounter) {
        this.idCounter = idCounter;
    }
}




// 存放每一个房屋信息的类
package games.HouseRentalSystem.domain;

// house类的对象表示一个房屋信息
public class House {
    private int id;
    private String name;
    private String phone;
    private String address;
    private int rent;
    private String state;


    @Override
    public String toString() {
        return id+"\t\t"+name+"\t"+phone+"\t\t"+address+"\t"+rent+"\t"+state;
    }

    public House(int id, String name, String phone, String address, int rent, String state) {
        this.id = id;
        this.name = name;
        this.phone = phone;
        this.address = address;
        this.rent = rent;
        this.state = state;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public int getRent() {
        return rent;
    }

    public void setRent(int rent) {
        this.rent = rent;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }
}




// 工具类
package games.HouseRentalSystem.tools;
import java.util.*;

/**
 * 工具类的作用:
 * 处理各种情况的用户输入，并且能够按照程序员的需求，得到用户的控制台输入。
 */

public class Utility {
    //静态属性....
    private static Scanner scanner = new Scanner(System.in);

    /**
     * 功能：读取键盘输入的一个菜单选项，值：1——5的范围
     *
     * @return 1——5
     */
    public static char readMenuSelection() {
        char c;
        for (; ; ) {
            String str = readKeyBoard(1, false);//包含一个字符的字符串
            c = str.charAt(0);//将字符串转换成字符char类型
            if (c != '1' && c != '2' &&
                    c != '3' && c != '4' && c != '5') {
                System.out.print("选择错误，请重新输入：");
            } else break;
        }
        return c;
    }

    /**
     * 功能：读取键盘输入的一个字符
     *
     * @return 一个字符
     */
    public static char readChar() {
        String str = readKeyBoard(1, false);//就是一个字符
        return str.charAt(0);
    }

    /**
     * 功能：读取键盘输入的一个字符，如果直接按回车，则返回指定的默认值；否则返回输入的那个字符
     *
     * @param defaultValue 指定的默认值
     * @return 默认值或输入的字符
     */

    public static char readChar(char defaultValue) {
        String str = readKeyBoard(1, true);//要么是空字符串，要么是一个字符
        return (str.length() == 0) ? defaultValue : str.charAt(0);
    }

    /**
     * 功能：读取键盘输入的整型，长度小于2位
     *
     * @return 整数
     */
    public static int readInt() {
        int n;
        for (; ; ) {
            String str = readKeyBoard(5, false);//一个整数，长度<=2位
            try {
                n = Integer.parseInt(str);//将字符串转换成整数
                break;
            } catch (NumberFormatException e) {
                System.out.print("数字输入错误，请重新输入：");
            }
        }
        return n;
    }

    /**
     * 功能：读取键盘输入的 整数或默认值，如果直接回车，则返回默认值，否则返回输入的整数
     *
     * @param defaultValue 指定的默认值
     * @return 整数或默认值
     */
    public static int readInt(int defaultValue) {
        int n;
        for (; ; ) {
            String str = readKeyBoard(10, true);
            if (str.equals("")) {
                return defaultValue;
            }

            //异常处理...
            try {
                n = Integer.parseInt(str);
                break;
            } catch (NumberFormatException e) {
                System.out.print("数字输入错误，请重新输入：");
            }
        }
        return n;
    }

    /**
     * 功能：读取键盘输入的指定长度的字符串
     *
     * @param limit 限制的长度
     * @return 指定长度的字符串
     */

    public static String readString(int limit) {
        return readKeyBoard(limit, false);
    }

    /**
     * 功能：读取键盘输入的指定长度的字符串或默认值，如果直接回车，返回默认值，否则返回字符串
     *
     * @param limit        限制的长度
     * @param defaultValue 指定的默认值
     * @return 指定长度的字符串
     */

    public static String readString(int limit, String defaultValue) {
        String str = readKeyBoard(limit, true);
        return str.equals("") ? defaultValue : str;
    }


    /**
     * 功能：读取键盘输入的确认选项，Y或N
     * 将小的功能，封装到一个方法中.
     *
     * @return Y或N
     */
    public static char readConfirmSelection() {
        System.out.println("请输入你的选择(Y/N)");
        char c;
        for (; ; ) {//无限循环
            //在这里，将接受到字符，转成了大写字母
            //y => Y n=>N
            String str = readKeyBoard(1, false).toUpperCase();
            c = str.charAt(0);
            if (c == 'Y' || c == 'N') {
                break;
            } else {
                System.out.print("选择错误，请重新输入：");
            }
        }
        return c;
    }

    /**
     * 功能： 读取一个字符串
     *
     * @param limit       读取的长度
     * @param blankReturn 如果为true ,表示 可以读空字符串。
     *                    如果为false表示 不能读空字符串。
     *                    <p>
     *                    如果输入为空，或者输入大于limit的长度，就会提示重新输入。
     * @return
     */
    private static String readKeyBoard(int limit, boolean blankReturn) {

        //定义了字符串
        String line = "";

        //scanner.hasNextLine() 判断有没有下一行
        while (scanner.hasNextLine()) {
            line = scanner.nextLine();//读取这一行

            //如果line.length=0, 即用户没有输入任何内容，直接回车
            if (line.length() == 0) {
                if (blankReturn) return line;//如果blankReturn=true,可以返回空串
                else continue; //如果blankReturn=false,不接受空串，必须输入内容
            }

            //如果用户输入的内容大于了 limit，就提示重写输入
            //如果用户如的内容 >0 <= limit ,我就接受
            if (line.length() < 1 || line.length() > limit) {
                System.out.print("输入长度（不能大于" + limit + "）错误，请重新输入：");
                continue;
            }
            break;
        }

        return line;
    }
}




// 测试类
package games.HouseRentalSystem;
import games.HouseRentalSystem.view.View;

public class Houserent_APP {
    public static void main(String[] args) {
        new View().mainMenu();

        System.out.println("你退出了房屋系统.....");
    }
}
